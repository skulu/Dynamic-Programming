# Return a boolean indicating if the targetsum can be generated by the numbers 
# in the array numbers. Assume all numbers in array are positive and you can 
# reuse the numbers as many times as you wish.

# Let n be len(numbers), m be target.
# O(n*m) time complexity, O(m) space complexity
def canSum(target, numbers):
    table = [False for col in range(target+1)]
    table[0] = True # base case, then current amount + numbers[x] will also be True
    
    for i in range(target):
        for j in range(len(numbers)):
            if table[i] == True and (i+numbers[j]) < target+1:
                table[i+numbers[j]] = True
    
    return table[target]

print(canSum(7,[2,3]))
print(canSum(7,[5,3,4,7]))
print(canSum(7,[2,4]))
print(canSum(8,[2,3,5]))
print(canSum(300,[7,14])) 